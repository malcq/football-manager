{"version":3,"sources":["store/global/actions/leagues.js","pages/leagues.js","config.js","utils/axios.js","utils/helper.js","hooks/outSideClick.js","components/DatePicker/index.js","components/CustomSelect/index.js","components/AutoComplete/ListItem.js","components/AutoComplete/index.js","components/Table/Table.js","components/Table/LeagueTable.js","components/Table/TeamTable.js","styles/page.js","components/Notify/index.js"],"names":["serverAddress","config","availableCompetitions","serverApi","LeaguesPage","leagues","useSelector","state","global","shallowEqual","dispatch","useDispatch","competitions","useMemo","filterBySearch","searchCompetition","collection","useEffect","a","axiosWrapper","method","url","data","filter","id","includes","type","GET_LEAGUES","console","log","Notify","response","message","className","list","onSearch","searchStr","SEARCH_LEAGUE","searchVal","xAuthToken","rangeNumbs","start","end","Array","fill","map","_","idx","params","headers","axios","name","getDates","matches","dates","season","startDate","endDate","Set","updateUrl","parsed","history","location","searchString","queryString","stringify","push","pathname","search","paginate","array","maxPerPage","page_number","slice","getCountPages","length","Math","ceil","renderPages","pages","activePage","useOutsideClick","ref","callback","handleClick","e","current","contains","target","document","addEventListener","removeEventListener","formatDate","day","d","Date","ye","Intl","DateTimeFormat","year","format","mo","month","da","DatePicker","onDateSelect","disabledArea","useState","from","setFrom","to","setTo","enteredTo","setEnteredTo","isOpen","setIsOpen","useRef","disabledDays","before","after","isSelectingFirstDay","isBeforeFirstDay","DateUtils","isDayBefore","modifiers","selectedDays","SCalendar","onClick","numberOfMonths","fromMonth","onDayClick","range","isDayInRange","onDayMouseEnter","Helmet","styled","div","endYear","years","CustomSelect","onSeasonSelect","selectVal","setSelectVal","setClose","value","SForm","htmlFor","onChange","test","bind","form","Colors","white","BoxShadows","main","blue","ListItem","setValue","SListItem","rainyDark","li","AutoCompleteInput","autoCompleteVal","setAutocompleteVal","searchList","startsWith","onHandleClick","SAutoComplete","onSubmit","preventDefault","grey","titles","ByLeagueTable","setActivePage","paginatedList","STable","title","homeTeam","awayTeam","score","status","winner","page","Page","isActive","React","memo","black","span","props","table","LeagueTable","area","ensignUrl","countryCode","countryName","SLink","SAvatar","flag","Link","td","TeamTable","email","phone","crestUrl","href","SPage","section","err","toast","error"],"mappings":"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","file":"static/js/5.375bf0a0.chunk.js","sourcesContent":["import Notify from '../../../components/Notify';\nimport axiosWrapper from '../../../utils/axios';\nimport config from '../../../config';\nimport { GET_LEAGUES, SEARCH_LEAGUE} from '../actionNames';\n\n\nconst { serverAddress, availableCompetitions } = config;\nconst serverApi = `${serverAddress}/v2`;\n\nconst getLeagues = (data) => ({\n  type: GET_LEAGUES,\n  data\n});\n\nexport const searchLeague = (data) => ({\n  type: SEARCH_LEAGUE,\n  data\n});\n\nexport const getAllLeagues = () => async (dispatch) => {\n  try {\n    const { data: { competitions } } = await axiosWrapper({\n    method: 'GET',\n    url: `${serverApi}/competitions`\n  });\n\n  dispatch(getLeagues(competitions.filter(({ id }) => availableCompetitions.includes(id))));\n  } catch (err) {\n    console.log('all competitions service err');\n    Notify(err.response.data.message)\n    throw err;\n  }\n}","import { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\n\nimport { getAllLeagues, searchLeague } from '../store/global/actions/leagues';\nimport { AutoCompleteInput, LeagueTable } from '../components';  \nimport { filterBySearch } from '../utils';\nimport { SPage } from '../styles';\n\n\nconst LeaguesPage = () => {\n  const leagues = useSelector(state => state.global.leagues, shallowEqual);\n  const dispatch = useDispatch();\n  const onSearchLeague = (searchStr) => dispatch(searchLeague(searchStr));\n\n  const competitions = useMemo(() =>\n    filterBySearch(\n      leagues.searchCompetition,\n      leagues.collection\n    ),\n  [leagues.searchCompetition,leagues.collection]);\n \n  useEffect(() => dispatch(getAllLeagues()), [dispatch]);\n\n \n  return (\n    <SPage>\n      <h1 className='page__title'>Leagues page</h1>\n      <AutoCompleteInput \n        list={leagues.collection}\n        onSearch={onSearchLeague}\n        searchVal={leagues.searchCompetition}\n      />\n      <LeagueTable list={competitions} />\n    </SPage>\n  )\n}\n\nexport default LeaguesPage;","const config = {\n  serverAddress: 'https://api.football-data.org',\n  xAuthToken: 'f61c04196391472988cb5aebacdcae1c',\n  availableCompetitions: [2000,2001,2002,2003,2013,2014,2015,2016,2017,2018,2019,2021],\n  rangeNumbs: (start, end) => Array(end - start + 1).fill().map((_, idx) => start + idx),\n};\n\n\nexport default config;","import axios from 'axios';\nimport config from '../config';\n\n\nconst getDefaultHeaders = () => ({\n    'X-Auth-Token': `${config.xAuthToken}`\n});\n\n  \nconst axiosWrapper = async ({\n  method = 'GET',\n  url = '',\n  data = {},\n  params = {},\n  headers = {}\n}) => {\n    try {\n      const response = await axios({\n        method,\n        url,\n        params,\n        headers: {\n          ...getDefaultHeaders(),\n          ...headers,\n        }\n      });\n\n      return response;\n    } catch(err){\n      console.log(err, 'axiosWrapper err');\n      throw (err);\n    }\n}\n\nexport default axiosWrapper;","import queryString from 'query-string';\n\nimport config from '../config';\n\nexport const filterBySearch = (searchVal, collection = []) => {\n  if (!searchVal) return collection;\n  return collection.filter(({ name }) => name === searchVal);\n}\n\nexport const getDates = (matches) => {\n  const dates = matches.map(({ season: { startDate, endDate } }) => [startDate, endDate]);\n  return [...new Set(...dates)];\n}\n\nexport const updateUrl = (parsed, history, location) => {\n  const searchString = queryString.stringify(parsed);\n  history.push({\n    pathname: location.pathname,\n    search: searchString\n  })\n}\n\n\nexport const paginate = (array, maxPerPage, page_number = 1) => {\n  return array.slice((page_number - 1) * maxPerPage, page_number * maxPerPage);\n}\n\nexport const getCountPages = (array, maxPerPage) => {\n  let cntPages;\n  if (!array.length) {\n    cntPages = 0;\n  } else if (array.length <= maxPerPage) {\n    cntPages = 1;\n  } else {\n    cntPages = Math.ceil(array.length / maxPerPage);\n  }\n  return cntPages;\n}\n\nexport const renderPages = (pages, activePage) => {\n  if (pages === 1) return [];\n  return config.rangeNumbs(1, pages)\n}","import { useEffect } from \"react\";\n\nconst useOutsideClick = (ref, callback) => {\n  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  });\n};\n\nexport default useOutsideClick;","import { useState, useRef } from 'react';\nimport Helmet from 'react-helmet';\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport styled from 'styled-components';\n\nimport useOutsideClick from '../../hooks/outSideClick';\n\nimport 'react-day-picker/lib/style.css';\n\n\nconst formatDate = (day) => {\n  const d = new Date(day)\n  const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d)\n  const mo = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(d)\n  const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d)\n  return `${ye}-${mo}-${da}`;\n}\n\nconst DatePicker = ({onDateSelect, disabledArea: [startDate, endDate]}) => {\n  const [from, setFrom] = useState(null);\n  const [to, setTo] = useState(null);\n  const [enteredTo, setEnteredTo] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const ref = useRef();\n  const disabledDays = { \n    before: new Date(startDate),\n    after: new Date(endDate)\n  };\n\n  const setOpen = () => setIsOpen(true);\n\n  const isSelectingFirstDay = (from, to, day) => {\n    const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n    const isRangeSelected = from && to;\n    return !from || isBeforeFirstDay || isRangeSelected;\n  };\n\n  const handleResetClick = () => {\n    setFrom(null);\n    setTo(null);\n    setEnteredTo(null);\n  }\n\n  const handleDayClick = (day) => {\n    const {before, after } = disabledDays;\n    const range = {\n      from: before,\n      to: after\n    }\n\n    if (!DateUtils.isDayInRange(day, range)) return;\n\n    if (from && to && day >= from && day <= to) {\n      handleResetClick();\n      return;\n    }\n\n    if (isSelectingFirstDay(from, to, day)) {\n      setFrom(day);\n      setTo(null);\n      setEnteredTo(null);\n    \n    } else {\n      setTo(day);\n      setEnteredTo(day);\n      onDateSelect(formatDate(from),formatDate(day))\n      setIsOpen(false)\n    }\n  }\n\n  const handleDayMouseEnter = (day) => {\n    if (!isSelectingFirstDay(from, to, day)) {\n      setEnteredTo(day);\n    }\n  }\n\n  useOutsideClick(ref, () => setIsOpen(false));\n\n  const modifiers = { start: from, end: enteredTo };\n  const selectedDays = [from, { from, to: enteredTo }];\n  return (\n    <SCalendar\n      ref={ref}\n      className='calendar__layout'\n      onClick={setOpen}\n    >\n      {isOpen \n      &&\n      (<>\n        <DayPicker\n          className=\"Range\"\n          numberOfMonths={2}\n          fromMonth={from}\n          selectedDays={selectedDays}\n          disabledDays={disabledDays}\n          modifiers={modifiers}\n          onDayClick={handleDayClick}\n          onDayMouseEnter={handleDayMouseEnter}\n        />\n        <Helmet>\n          <style>\n            {`.Range .DayPicker-Day--selected:not(.DayPicker-Day--start):not(.DayPicker-Day--end):not(.DayPicker-Day--outside) {\n              background-color: #f0f8ff !important;\n              color: #4a90e2;\n            }\n            .Range {\n              position: absolute;\n              color: black;\n              background: #ffffff;\n              border-radius: 5px;\n              box-shadow: 4px 4px 8px 0px rgb(34, 60, 80, 0.2);\n              right: 5px;\n              top: 30px;\n            }\n            .Range .DayPicker-Day {\n              border-radius: 0 !important;\n              outline: none !important;\n            }`}\n          </style>\n        </Helmet>\n        </>\n      )}\n    </SCalendar>\n  );\n}\n\nexport default DatePicker;\n\nconst SCalendar = styled.div`\n  position: relative;\n  padding: 15px;\n  background: url(/img/calendar.png) no-repeat 100% 50%;\n  background-size: contain;\n  cursor: pointer;\n`;","import { useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { Colors, BoxShadows } from '../../styles/variables';\nimport useOutsideClick from '../../hooks/outSideClick';\nimport config from '../../config';\n\nconst startYear = 2010;\nconst endYear = 2021;\nconst years = config.rangeNumbs(startYear, endYear);\n\nconst CustomSelect = ({ year = '', onSeasonSelect }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectVal, setSelectVal] = useState(year);\n  const ref = useRef();\n\n  const setOpen = () => setIsOpen(true);\n  const setClose = (value) =>  {\n    onSeasonSelect(value);\n    setSelectVal(value);\n    setIsOpen(false);\n  }\n\n  const handleChange = ({target: { value }}) => {\n    if (\n      (!/^\\d+$/.test(value) && value.length)\n    ||\n      (value.length > 4)\n    ) return;\n\n    if (value.length === 4) {\n      value = (value >= startYear && value <= endYear) ? value : endYear;\n      onSeasonSelect(value);\n      setIsOpen(false);\n    }\n    setSelectVal(value);\n  }\n\n  useOutsideClick(ref, () => setIsOpen(false));\n\n  return (\n    <SForm className='select' ref={ref} >\n      <label htmlFor=\"\">\n        <input \n          type=\"text\"\n          className='select__input'\n          onChange={handleChange}\n          onClick={setOpen}\n          value={selectVal}\n        />\n      </label>\n      { isOpen && (<ul className=\"select-list\">\n        {years.map((year, idx) =>\n          <li\n            key={idx} \n            className='select-list__input'\n            onClick={setClose.bind(null,year)}\n          >\n            {year}\n          </li>)}\n      </ul>)}\n    </SForm>\n  )\n}\n\nexport default CustomSelect;\n\nconst SForm = styled.form`\n  position: relative;\n  .select-list {\n    position: absolute;\n    top: 25px;\n    width: 100%;\n    background-color: ${Colors.white};\n    box-shadow: ${BoxShadows.main};\n    &__input {\n      padding: 5px 10px;\n      cursor: pointer;\n      :hover {\n        color: ${Colors.white};\n        background-color: ${Colors.blue};\n      }\n    }\n  }\n`;","import styled from 'styled-components';\n\nimport { Colors } from '../../styles/variables';\n\n\nconst ListItem = ({ id, name, setValue }) => {\n  return (\n    <SListItem key={id} onClick={setValue.bind(null, name)} >{name}</SListItem>\n  )\n}\n\nexport default ListItem;\n\nconst { white, rainyDark } = Colors;\n\nconst SListItem = styled.li`\n  padding: 0 15px;\n  line-height: 30px;\n  &:hover {\n    color: ${white};\n    background-color: ${rainyDark};\n    cursor: pointer;\n  }\n`;","import { useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { Colors, BoxShadows } from '../../styles/variables';\nimport useOutsideClick from '../../hooks/outSideClick';\nimport ListItem from './ListItem';\n\n\nconst AutoCompleteInput = ({ list, onSearch, searchVal }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [autoCompleteVal, setAutocompleteVal] = useState(searchVal);\n  const ref = useRef();\n\n  const filterList = (searchString) =>  {\n    if (!searchString) return list;\n    return list.filter(({ name }) => name.startsWith(searchString))\n  }\n\n  const searchList = filterList(autoCompleteVal);\n  const onChange = ({target: { value }}) => setAutocompleteVal(value);\n  const onSubmit = (e) => {\n    e.preventDefault();\n    onSearch(autoCompleteVal);\n    setIsOpen(false);\n  }\n  const onClick = () => setIsOpen(true);\n\n  const onHandleClick = (value) => {\n    setAutocompleteVal(value)\n    onSearch(value);\n    setIsOpen(false);\n  }\n\n  useOutsideClick(ref, () => setIsOpen(false));\n  \n  return (\n    <SAutoComplete ref={ref} onSubmit={onSubmit} isOpen={isOpen} >\n      <span\n        className='autocomplete-form__reset'\n        onClick={onHandleClick.bind(null,'')}\n      >\n        reset\n      </span>\n      <label>\n        <input \n          type=\"text\"\n          className=\"autocomplete-form__input\"\n          onChange={onChange}\n          onClick={onClick}\n          value={autoCompleteVal}\n        />\n      </label>\n      <button \n        type=\"submit\"\n        className=\"autocomplete-form__btn\"\n      />\n      \n      {\n        isOpen && (\n          <ul className=\"autocomplete__list\">\n            {searchList.map(({id, name}) => \n              <ListItem \n                key={id}\n                id={id}\n                name={name}\n                setValue={onHandleClick}\n              />)}\n          </ul>\n        )\n      }\n    </SAutoComplete>\n    \n  )\n}\n\nexport default AutoCompleteInput;\n\nconst { white, grey } = Colors;\n\nconst SAutoComplete = styled.form`\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  @media only screen and (max-width: 760px) {\n    margin: 10px 0;\n    justify-content: space-between;\n    label {\n      width: 100%;\n    }\n  }\n  .autocomplete {\n    &-form {\n      &__reset {\n        display: inline-block;\n        margin-right: 10px;\n        padding: 0 25px;\n        background-color: ${grey};\n        box-shadow: ${BoxShadows.main};\n        cursor: pointer;\n        :active {\n          transform: scale(.8);      \n        }\n      }\n      &__input {\n        width: 213px;\n        @media only screen and (max-width: 760px) {\n          width: 95%;\n        }\n      }\n\n      &__search-layout {\n        padding: 5px;\n        background-image: url(../img/search.png);\n      }\n\n      &__btn {\n        margin-left: 10px;\n        width: 20px;\n        height: 20px;\n        background: ${white} url(../img/search.png) no-repeat 50% 50%;\n        background-size: contain;\n        overflow: hidden;\n        border: none;\n        cursor: pointer;\n      }\n    }\n    &__list {\n      display: flex;\n      flex-direction: column;\n      width: 220px;\n      position: absolute;\n      top: 25px;\n      right: 30px;\n      background: ${white};\n      box-shadow: ${BoxShadows.main};\n      z-index: 1;\n\n      @media only screen and (max-width: 760px) {\n        width: 90%;\n        right: 0;\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { paginate, getCountPages, renderPages } from '../../utils';\nimport { Colors } from '../../styles/variables';\n\nconst maxPerPage = 15;\nconst titles = [ 'title', 'homeTeam', 'awayTeam', 'winner', 'status'];\nconst ByLeagueTable = ({ list }) => {\n  const [activePage, setActivePage ] = useState(1);\n  const paginatedList = paginate(list, maxPerPage, activePage);\n  const pages = getCountPages(list, maxPerPage);\n\n  return (\n    <>\n      <STable className=\"table\">\n        <thead>\n          <tr>\n            {titles.map((title, idx) => <th key={idx}>{title}</th>)}\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedList.map(\n          ({ id, homeTeam, awayTeam, score, status }) =>\n            (<tr key={id}>\n              <td>{homeTeam.name} vs {awayTeam.name}</td>\n              <td>{homeTeam.name}</td>\n              <td>{awayTeam.name}</td>\n              <td>{score.winner}</td>\n              <td>{status}</td>\n            </tr>)\n          )}\n        </tbody>\n      </STable>\n      {renderPages(pages).map((page, idx) => (\n        <Page \n          key={idx}\n          className='page'\n          isActive={activePage === page}\n          onClick={setActivePage.bind(null, page)}\n        >\n          {page}\n        </Page>\n      ))}\n    </>)\n}\n\nexport default React.memo(ByLeagueTable);\n\nconst { white, black, blue, grey } = Colors;\n\nconst Page = styled.span`\n  display: inline-block;\n  margin: 5px;\n  width: 30px;\n  padding: 5px;\n  color: ${props => props.isActive ? blue : black};\n  text-align: center;\n  border: 1px solid;\n  border-radius: 5px;\n  box-sizing: border-box;\n  cursor: pointer;\n\n  :hover {\n    color: blue;\n  }\n`;\nconst STable = styled.table`\n  width: 100%; \n  border-collapse: collapse; \n  margin: 15px 0;\n  tr:nth-of-type(odd) { \n    background: ${grey}; \n  }\n  th { \n    background: ${black}; \n    color: ${white}; \n    font-weight: 700; \n  }\n  td, th { \n    padding: 5px; \n    border: 1px solid #ccc; \n    text-align: left;\n    max-width: 250px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis\n  }\n  \n    @media only screen and (max-width: 760px),\n(min-device-width: 768px) and (max-device-width: 1024px)  {\n\n\ttable, thead, tbody, th, td, tr { \n\t\tdisplay: block; \n\t}\n\t\n\t/* Hide table headers (but not display: none;, for accessibility) */\n\tthead tr { \n\t\tposition: absolute;\n\t\ttop: -9999px;\n\t\tleft: -9999px;\n\t}\n\t\n\ttr { border: 1px solid #ccc; }\n\t\n\ttd { \n\t\tborder: none;\n\t\tborder-bottom: 1px solid #eee; \n\t\tposition: relative;\n\t\tpadding-left: 50%;\n    height: 19px;\n\t}\n\t\n\ttd:before { \n\t\tposition: absolute;\n\t\ttop: 6px;\n\t\tleft: 6px;\n\t\twidth: 45%; \n\t\tpadding-right: 10px; \n\t\twhite-space: nowrap;\n\t}\n\t\n\t/*\n\tLabel the data\n\t*/\n\ttd:nth-of-type(1):before { content: \"name\"; }\n\ttd:nth-of-type(2):before { content: \"flag\"; }\n\ttd:nth-of-type(3):before { content: \"country\"; }\n\ttd:nth-of-type(4):before { content: \"code\"; }\n}\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport styled from 'styled-components';\n\nimport { Colors } from '../../styles/variables';\n\nconst titles = ['name', 'code', 'country', 'flag'];\nconst LeagueTable = ({ list }) => (\n  <STable className=\"table\">\n    <thead>\n      <tr>\n        {titles.map((title, idx) => <th key={idx}>{title}</th>)}\n      </tr>\n    </thead>\n    <tbody>\n      {list.map(\n      ({ id, name, area: { ensignUrl, countryCode, name: countryName } }) =>\n        (<tr key={id}>\n          <td><SLink to={`/competitions/${id}`} className='table__link'>{name}</SLink></td>\n          <td>{countryCode}</td>\n          <td>{countryName}</td>\n          <SAvatar flag={ensignUrl} ></SAvatar>\n        </tr>)\n      )}\n    </tbody>\n  </STable>\n)\n\nexport default React.memo(LeagueTable);\n\nconst { white, black, grey, blue } = Colors;\n\nconst SLink = styled(Link)`\n  color: ${blue};\n`;\n\nconst SAvatar = styled.td`\n  background: url(${props => props.flag ? props.flag : '../img/unknown-flag.png'}) no-repeat 50% 50%;\n  background-size: contain;\n`;\n\nconst STable = styled.table`\n  width: 100%; \n  border-collapse: collapse; \n  margin-top: 15px;\n  tr:nth-of-type(odd) { \n    background: ${grey}; \n  }\n  th { \n    background: ${black}; \n    color: ${white}; \n    font-weight: 700; \n  }\n  td, th { \n    padding: 5px; \n    border: 1px solid #ccc; \n    text-align: left;\n    max-width: 250px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis\n  }\n    @media only screen and (max-width: 760px),\n(min-device-width: 768px) and (max-device-width: 1024px)  {\n\n\ttable, thead, tbody, th, td, tr { \n\t\tdisplay: block; \n\t}\n\t\n\t/* Hide table headers (but not display: none;, for accessibility) */\n\tthead tr { \n\t\tposition: absolute;\n\t\ttop: -9999px;\n\t\tleft: -9999px;\n\t}\n\t\n\ttr { border: 1px solid #ccc; }\n\t\n\ttd { \n\t\tborder: none;\n\t\tborder-bottom: 1px solid #eee; \n\t\tposition: relative;\n\t\tpadding-left: 50%;\n    height: 19px;\n\t}\n\t\n\ttd:before { \n\t\tposition: absolute;\n\t\ttop: 6px;\n\t\tleft: 6px;\n\t\twidth: 45%; \n\t\tpadding-right: 10px; \n\t\twhite-space: nowrap;\n\t}\n\t\n\t/*\n\tLabel the data\n\t*/\n\ttd:nth-of-type(1):before { content: \"name\"; }\n\ttd:nth-of-type(2):before { content: \"flag\"; }\n\ttd:nth-of-type(3):before { content: \"country\"; }\n\ttd:nth-of-type(4):before { content: \"code\"; }\n}\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport styled from 'styled-components';\n\nimport { Colors } from '../../styles/variables';\n\nconst titles = ['name', 'email', 'phone', 'flag'];\nconst TeamTable = ({ list }) => (\n  <STable className=\"table\">\n    <thead>\n      <tr>\n        {titles.map((title, idx) => <th key={idx}>{title}</th>)}\n      </tr>\n    </thead>\n    <tbody>\n      {list.map(\n      ({ id, name, email, phone, crestUrl }) =>\n        (<tr key={id}>\n          <td><SLink to={`/teams/${id}`} className='table__link'>{name}</SLink></td>\n          <td>{email}</td>\n          <td><a href={`tel:${phone}`}>{phone}</a></td>\n          <SAvatar flag={crestUrl} ></SAvatar>\n        </tr>)\n      )}\n    </tbody>\n  </STable>\n)\n\nexport default React.memo(TeamTable);\n\nconst { white, black, grey, blue } = Colors;\n\nconst SLink = styled(Link)`\n  color: ${blue};\n`;\n\nconst SAvatar = styled.td`\n  background: url(${props => props.flag ? props.flag : '../img/unknown-flag.png'}) no-repeat 50% 50%;\n  background-size: contain;\n`;\n\nconst STable = styled.table`\n  width: 100%; \n  border-collapse: collapse; \n  margin-top: 15px;\n  tr:nth-of-type(odd) { \n    background: ${grey}; \n  }\n  th { \n    background: ${black}; \n    color: ${white}; \n    font-weight: 700; \n  }\n  td, th { \n    padding: 5px; \n    border: 1px solid #ccc; \n    text-align: left;\n    max-width: 250px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis\n  }\n    @media only screen and (max-width: 760px),\n(min-device-width: 768px) and (max-device-width: 1024px)  {\n\n\ttable, thead, tbody, th, td, tr { \n\t\tdisplay: block; \n\t}\n\t\n  td a {\n    color: blue;\n  }\n\t/* Hide table headers (but not display: none;, for accessibility) */\n\tthead tr { \n\t\tposition: absolute;\n\t\ttop: -9999px;\n\t\tleft: -9999px;\n\t}\n\t\n\ttr { border: 1px solid #ccc; }\n\t\n\ttd { \n\t\tborder: none;\n\t\tborder-bottom: 1px solid #eee; \n\t\tposition: relative;\n\t\tpadding-left: 50%;\n    height: 19px;\n\t}\n\t\n\ttd:before { \n\t\tposition: absolute;\n\t\ttop: 6px;\n\t\tleft: 6px;\n\t\twidth: 45%; \n\t\tpadding-right: 10px; \n\t\twhite-space: nowrap;\n\t}\n\t\n\t/*\n\tLabel the data\n\t*/\n\ttd:nth-of-type(1):before { content: \"name\"; }\n\ttd:nth-of-type(2):before { content: \"flag\"; }\n\ttd:nth-of-type(3):before { content: \"country\"; }\n\ttd:nth-of-type(4):before { content: \"code\"; }\n}\n`;","import styled from 'styled-components';\n\nimport { Colors, BoxShadows } from './variables';\n \n\n const SPage = styled.section`\n  max-width: 95%;\n  margin: 0 auto;\n  padding: 20px;\n  color: ${Colors.black};\n  border-radius: 5px;\n  background: ${Colors.white};\n  box-shadow: ${BoxShadows.main};\n  box-sizing: border-box;\n  @media only screen and (max-width: 760px) {\n    max-width: 99%;\n  }\n  @media only screen and (max-width: 420px) {\n    padding: 10px 5px;\n  }\n  .page {\n    &__title {\n      font-size: 2em;\n      text-align: center;\n    }\n    &__panel {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      &--team {\n        justify-content: flex-end;\n      }\n    }\n    &__reset {\n      width: 150px;\n      margin: 0 auto;\n      padding: 5px 10px;\n      text-align: center;\n      background-color: ${Colors.grey};\n      box-shadow: ${BoxShadows.main};\n      cursor: pointer;\n      &:active {\n        transform: scale(.8);      \n      }\n    }\n  }\n`;\n\nexport default SPage;","import { toast } from 'react-toastify';\n\n\nconst Notify = (err) => toast.error(err);\n\nexport default Notify;"],"sourceRoot":""}